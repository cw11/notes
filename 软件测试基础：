软件测试基础：

web自动化---selenium2(webdriver):
    8大元素定位方法：id、name、class_name、tag_name、lonk_text、partial_link_text、Xpath、Css

1、软件开发过程模型：在软件开发的几十年实践中，人们总结了很多软件开发模型用来描述和表示一个复杂的开发过程，如：瀑布模型、快速原型模型、螺旋模型
2、瀑布模型：
        a、是线性模型的一种，在所有模型中占有重要地位，是所有模型的一个基础
        b、每一个阶段执行一次，按线性顺序进行软件开发
    需求分析--设计--编码--实现（切入点）--软件测试--完成--维护 
    测试的切入点：
        测试阶段处于软件实现后，必须在代码完成后留出足够的时间给测试活动，否则将导致测试不充分，很多问题到项目后期才暴露问题
3、瀑布模型的优缺点：
        优点：
        1、开发的各个阶段比较清晰
        2、强调早期计划及需求调查
        3、适合需求稳定的产品开发
        缺点：
        1、依赖早期的需求调查，不适应需求的变化
        2、单一流程不可逆
        3、风险往往延至后期才显露，失去及早纠正的机会
        4、问题在项目后期才开始暴露
        5、前面未发现的错误会传递并扩散到后面的阶段，可能导致项目失败
        改良：沿用瀑布模型的线性思想了，细化了各个阶段，在某些重要关注的阶段之间渗入迭代的思想 
4、快速原型模型：
        在开发真实系统之前，构造一个原型，在该原型的基础上，逐渐完成整个系统的开发工作：
        第一步是建造一个快速原型，实现用户与系统的交互，用户对原型进行评价，进一步细化待开发软件的需求。通过逐步调整原型                    使其满足用户的要求，开发人员可以确定用户的真正需求是什么
        第二步是在第一步的基础上开发出用户满意的软件产品
        快速分析--需求说明--构造原型--原型--运行原型--评价原型--修改意见
        
5、螺旋模型
        螺旋模型将开发过程分为几个螺旋周期，每个螺旋周期大致和瀑布模型相符合，螺旋模型沿着螺线旋转，非常浪费时                间，几乎不用，结合了瀑布和快速原型模型
        制定计划--风险分析--实施开发--客户评估
        
    总结：瀑布模型主要用于需求清晰的大型项目；快速原型主要适用于需求不清晰中小型项目；螺旋模型主要适用于需求不清晰的大型项目。
6、测试模型：
        随着测试过程的管理和发展，测试人员通过大量的实践，从而总结出了不少测试模型，如常见的V模型、W模型、H模型。这些模型与开发紧密结合，对测试活动进行了抽象，成为测试过程管理的重要参考依据。
7、V模型（要背下来）
    需求分析--概要设计--详细设计--编码--单元测试--集成设计--系统设计--验收测试
    
    1、单元测试（代码测试）：又称模块测试，针对单一的程序模块进行的测试
    2、集成测试：又称组装测试，在单元测试的基础上，对所有模块进行测试
    3、系统测试：将整个软件看作一个整体来进行测试，包括功能、性能、兼容性
    4、验收测试：
            （1）内测版（alpha）内部交流版本，可能存在很多bug，不建议用户安装
            （2）公测版（beta）面向所有用户，通过用户的反馈再去修改细节
            （3）候选版（gamma）与正式软件相差无几
        优点： 包含了底层测试（单元测试）和高层测试（系统测试）；清楚的标识了开发和测试的各个阶段；自上而下逐步求                               精，每个阶段分工明确，便于整体项目的把控
        缺点：自上而下的顺序导致了，测试工作在编码之后，就导致错误不能及时的进行修改
            在实际工作中，需求经常变化，导致v模型步骤，反复执行，返工量很大，灵活度很低
        改良：每个步骤都可以进行小的迭代工作
8、W模型：
        定义：开发一个v；测试一个v，组合起来的模型（也叫双v模型）
    
    优点：开发伴随着整个开发周期，需求和设计同样要测试；更早的介入测试，可以发现初期的缺陷，修复成本低；分阶段工作，方便项目整体管理
    缺点：开发和测试依然是线性的关系，需求的变更和调整，依然不方便；如果没有文档，根本无法执行W模型；对于项目组成员的技术要求更高。


10、三种模型总结：
    v模型适用于中小企业，w模型适用于中大型企业（因为人员要求高），h模型人员要求非常高，很少有公司使用。
11、软件测试分类
    
12、黑盒测试
    又称数据驱动测试，完全不考虑内部机构和特性，注重软件的功能需求（不管代码），只关心软件的输入数据和输出数据
    
    黑盒测试分类：（背下来）
    一、功能测试：
        1、逻辑功能测试
        2、界面测试
        3、易用性测试
        4、安装测试
        5 、兼容性测试
    二、性能测试
        1、时间性能
        2、空间性能
        3、一般性能
        4、稳定性
        5、负载测试
        6、压力测试
13、白盒测试
    盒子打开，研究里面的程序结构和源代码。
    在软件公司，往往采用黑盒测试和白盒测试相结合的方式：
        软件的整体功能和性能进行黑盒测试
        软件的源代码采用白盒测试
14、按是否运行分类：
    静态测试：指不实际运行被测软件，而只是静态的检查程序代码、界面、文档中可能存在的错误过程
    动态测试：是指实际被测程序，输入相应的测试数据，检查实际输出结果和预期结果是否相符的过程
15、随机测试（也叫探索测试）
    主要是对被测软件的一些重要功能、新增加的功能、特殊情况、以前发现过重大bug的模块进行二次测试。也包括测试那些当前测试用例没有覆盖到的部分。它可以结合回归测试来使用
16、软件测试分类（背下来）
    a、按测试阶段划分：单元测试、集成测试、系统测试
    b、是否覆盖源代码：
            白盒测试
            黑盒测试：功能测试、性能测试
    c、是否运行：静态测试（不运行程序）、动态测试（运行测试）
    d、其他：回归测试、冒烟测试、随机测试、验收测试（内测、公测、候选版）
    e、是否自动化：人工测试、自动化测试
17、灰盒测试：
    是介于白盒测试与黑盒测试之间的一种测试，即可保证黑盒的关注点又可掌控白盒的内部结构，但不会对内部程序功能和运作作详细了解，灰盒测试结合了白盒测试和黑盒测试的要素
18、测试用例：测什么和怎么测：买手机：开机、看运行速度、内存大小等等
    一个为了特定的目的而设计，包含测试输入、测试执行、预期结果的文档。
    8大要素：ID编号、测试标题、模块、优先级、预置条件、测试步骤、预期结果、测试数据
    8大测试用例设计方法：等价类、边界值、判定表、因果图、场景法、流程法、错误推断法、正交表法
19、等价类划分法：
    属于黑盒测试，它将不能穷举的测试过程进行分类，从而保证完整性和代表性
20、等价类思考步骤：
    1、先确定有效和无效等价类
    2、有效等价类就是题目条件（两端的极值（边界值）要判断、中间随意一个值也要判断）
    3、无效等价类先划分与条件相反的情况，再找到特殊情况（中文、英文、符号、空格、空）
    注意：两个框要一个正确一个错误，这样才能准确的判断；一定要根据需求来判断预期结果。
21、等价类细节总结：
    1、文本框要求输入的长度
    2、输入的类型
    3、组成规则
    4、是否为空
    5、是否重复--区分大小写
    6、是否去除空格
22、边界值：
    边界是指对于输入等价类和输出等价类而言，稍高于其边界值及稍低于边界值的一些特定情况。边界值分析法也是一种常用的黑盒测试方法。（大量的错误是发生在输入或输出范围边界上，而不是在输入范围的内部）
23、边界值--如何解决这类问题：
    1、找到测试数据的边界点，也就是有效等价类和无效等价类的边界点，对边界点数据专门进行测试
    2、一般情况下，需要对边界值（0和100）以及边界值两边的数（-1、1、101、99）分别进行测试
    
24、边界值的方法小结：
    1、如果输入条件规定了取值范围，则应取到这个范围的边界值，以及刚刚超过这个范围的值作为输入数据
    2、输入条件规定了取值个数
25、边界值和等价类区别：边界值分析不是从某等价类中随便挑一个作为代表，而是这个等价类的每个边界都要作为测试条件。边界值和等价类是相辅相成的关系，配合使用。
26、因果图法的定义：是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，它适合于检查程序输入条件的各种组合情况
    特点：
        考虑输入条件的相互制约及组合关系
        考虑输出条件对输入条件的依赖关系
    因：输入条件
    果：输出条件、出结果
    应用场景：适用于输入条件之间有相互制约、相互依赖的情况；
27、因果图中的符号：
    1、恒等--有因就有果，没有因就没有果
    2、非--有因没有果，没有因有果
    3、或--条件有一个是真，结果就是真，条件都是假，结果才是假
    4、且（与）--条件都为真，结果才是真，一个条件为假结果就为假
28、因果图基本步骤：
    
29、判定表概念：
    因果图只是一种辅助工具，通过分析最终得到判定表，再通过判定表编写测试用例。但有时画因果图非常麻烦，影响测试效率，可以直接写判定表，进而编写测试用例
    判定表的组成：
    1、条件桩：所有条件
    2、动作桩：所有结果
    3、条件项：针对条件桩的取值
    4、动作项：针对动作桩的取值
30、判定表法：
    1、列出所有的条件桩和动作桩
    2、填写条件和动作桩的项目
    3、简化判定表
    注意：如果出现‘-’代表此选项不影响最终结果
31、场景法概述：
    就是模拟用户操作软件时的场景，主要用于测试系统的业务流程，分为基本流（正确流程）和备选流（错误流程）
    在冒烟测试时也主要采用场景法进行测试
    注意：还要补充一些异常情况；
32、流程分析法：主要是针对测试场景类型属于流程测试场景的测试项下的测试子项进行设计，是从白盒测试设计方法中的路径覆盖分析法借鉴过来的一种方法；适用于有先后顺序的测试；常用于业务流程、安装流程等等。每个流程就是一条测试用例，他只是在测试整体流程是否正确，细节还需要使用等价类、边界值等方法进行完善。
    
    步骤：
    1、详细了解需求
    2、根据需求说明或界面原型，找出业务流程的各个页面以及各页面之间的流传关系
    3、画出业务流程（产品经理使用Axure软件制作）
    4、写用例，覆盖所有的路径分支
33、错误推断法：利用直觉和经验猜测出出错的可能类型，经验丰富的测试人员使用的。根据之前相关项目的bug总结出来的。
34、正交表概念：
    能够使用最小的测试过程集合获得最大的测试覆盖率，当可能的输入数据或者输入数据的组合数量很大时，由于不可能为每个输入组合都创建测试用例，可以采用这种方法
    从全面试验中挑选具有代表性的点进行测试（均匀分散，整齐可比）；高效率、快速。 
        
35、正交表使用方法：
    1、根据控件和取值数选择一个合适的正交表
    2、列举取值并编号，生成取值表
    3、把取值表与选择的正交表进行映射
36、混合正交表:
    在实际工作中，很多情况都是因素（控件个数）和水平（控件的选择个数）不同，我们在现成的正交表中找不到对应的表格，此时我们就需要使用混合正交表工具来生成混合正交表
    取值表：
    
    使用步骤：
    
37、测试方法的选择：
    
    
重点：
    1、如果测试功能和流程，要使用场景法
    2、需要输入数据的地方，我们要使用等价类划分法，要注意配合边界值法来做详细测试
    3、如果有条件组合的情况，我们要使用因果图制作出判定表
    4、配置类软件，组合比较多的，我们要使用正交表来科学的选择测试用例
    5、如果没有达到覆盖标准，就要增加一些测试用例
    6、依靠经验追加一些测试用例（错误推断法）
38、测试的力度和评审：
    测试用例的设计本质应该是在设计的过程中理解需求，检验需求，并把对软件的测试方法的思路记录下来，以便指导将来的测试。
    同行评审和用户评审
39、软件缺陷：
定义：缺陷就是软件的问题，最终表现为没有满足用户的需求
40、哪些属于软件缺陷：
    1、软件未达到规格说明书表明的功能
    2、软件出现了规格说明书中指明不会出现的错误
    3、软件功能超出了规格说明书指明的范围
    4、软件未达到规格说明书虽未指明但应该达到的目标
    5、软件测试人员或用户觉得不好
41、软件缺陷的表现形式：
    
    软件缺陷的产生是不可避免
    

42、软件缺陷的状态：
    
    1、提交一测试人员提交了一个缺陷给程序员
    2、打开--待处理
    3、拒绝--程序员认为不是缺陷或者重复，就可以修改状态为拒绝
    4、修复--程序员修复缺陷后提交的一个状态
    5、关闭--测试人员经过回归测试后，认为此缺陷已经解决，将其关闭
    6、推迟--可以放在后续版本解决的问题，但是要详细写出修复的日期或版本
43、软件缺陷严重程度的划分：
    
    1、low--表面性错误，如错别字
    2、medium--影响一个相对独立功能、仅仅发生在特定条件上、与需求定义不一致、断断续续出问题
    3、high--功能点没有实现、不符合用户需求、导致数据丢失
    4、veryhigh--频繁死机、大部分功能不能使用
    5、critical--系统瘫痪、异常退出、死循环、严重的计算错误
44、软件测试的优先级：
    
45、缺陷分类：
    
    
46、缺陷修改说明：
    
47、缺陷报告的注意事项：
    1、尽量保证缺陷可以重现
    2、简洁、 准确、完整
    3、一个缺陷报告只写一个缺陷
48、缺陷书写规范：（重要)
    
    
    
    
    
书写规范：
    1、标题简洁、提供缺陷的本质信息即可
    2、复现的步骤要详细，用数字编号
    3、实际结果要描述清楚复现后的结果
    4、列出期望结果
    5、提供附件
    6、提供严重性属性和其公司需要填写的属性
避免一些常见错误：
    1、避免使用情绪化语言和强调标点符号
    2、避免使用模糊的词语
    3、避免使用自认为幽默的语言，直接描述问题即可
    4、避免提交不确定的缺陷
49、缺陷的跟踪：（重要）
    
    
    新提交的缺陷为新建状态，在确认有效之后变为‘打开’，开发人员修改后变为‘已修复’状态，此时测试人员需要回归测试，如果验证问题已解决，状态为‘已解决’，如果问题依然存在，状态为‘打开’；如果开发人员任务此缺陷可以延期修改，状态为‘延期’，注意此时必须由项目相关人员讨论确定后，才可以延期处理，否则状态继续为‘打开’。
50、缺陷密度
    
    每千行代码的缺陷数：
    缺陷密度=1000*缺陷个数/代码行数
51、缺陷数据分析：
    
    
52、svn:版本管理软件：
    可架设在Apache上，最常用的客户端为TortoiseSVN（简称TSVN）
53、SVN版本库的新建、更新、提交：
    
54、SVN 添加、删除、改名、移动
    1、添加文件：找到随便一个受SVN控制的文件夹，在里面放你的文件，然后在这个受控制的文件上右键，提交即可实现
    2、删除文件：右键选择文件，点击删除（是svn的删除按钮），必须返回上级文件夹右键-提交；
    3、改名：文件-右键--tsvn的改名，然后回到上级文件夹右键-提交
    4、文件移动：右键找到‘tsvn的版本库浏览器’，随意拖拽文件的位置即可实现文件的移动效果（注意：如果是在服务器的版本库浏览器设置，直接可以实现一个默认的提交，如果不是在服务器的版本浏览器设置，就必须回到上级目录点击提交才可以）
55、更新历史版本和权限：
    更新至版本：必须是受svn控制的文件夹，右键--更新至版本--显示日志按钮--找到想要的历史版本，点击确定即可
    

    
   “自强不息，奋斗不止”是我研究生阶段的基本思想。在过去一年里，我保持积极进取的生活态度和学习态度，生活上：活泼开朗，热爱运动，拥有健康的体魄。学习上：获得了学位课均分87.35的成绩，并在导师的指导下完成了一篇SCI论文。今后我将继续发扬优点，克服不足，逐步提高学历能力，加强与他人合作，争取取得更大的进步，顺利迎接新的挑战，成为新时代高素质人才。

       



    
    

    
    
    








 


        
        










